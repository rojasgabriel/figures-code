%% This function is automatically written by MATLAB 

function labelNames = Import_LabelNames(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   FEZ7SPATIALDISCAUG142019SESSION1VIDEO00012DLCMOBNET100MICEAPR13 =
%   IMPORTFILE(FILENAME) Reads data from text file FILENAME for the default
%   selection.
%
%   FEZ7SPATIALDISCAUG142019SESSION1VIDEO00012DLCMOBNET100MICEAPR13 =
%   IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   Fez7SpatialDiscAug142019Session1Video00012DLCmobnet100MiceApr13 = importfile('Fez7_SpatialDisc_Aug14_2019_Session1_Video_0001_2DLC_mobnet_100_MiceApr13shuffle1_200000.csv', 2, 3);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2020/04/23 17:25:56

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 2;
    endRow = 3;
end

%% Format for each line of text:
%   column2: text (%s)
%	column3: text (%s)
%   column4: text (%s)
%	column5: text (%s)
%   column6: text (%s)
%	column7: text (%s)
%   column8: text (%s)
%	column9: text (%s)
%   column10: text (%s)
%	column11: text (%s)
%   column12: text (%s)
%	column13: text (%s)
%   column14: text (%s)
%	column15: text (%s)
%   column16: text (%s)
%	column17: text (%s)
%   column18: text (%s)
%	column19: text (%s)
%   column20: text (%s)
%	column21: text (%s)
%   column22: text (%s)
%	column23: text (%s)
%   column24: text (%s)
%	column25: text (%s)
%   column26: text (%s)
%	column27: text (%s)
%   column28: text (%s)
%	column29: text (%s)
%   column30: text (%s)
%	column31: text (%s)
%   column32: text (%s)
%	column33: text (%s)
%   column34: text (%s)
%	column35: text (%s)
%   column36: text (%s)
%	column37: text (%s)
%   column38: text (%s)
%	column39: text (%s)
%   column40: text (%s)
%	column41: text (%s)
%   column42: text (%s)
%	column43: text (%s)
%   column44: text (%s)
%	column45: text (%s)
%   column46: text (%s)
%	column47: text (%s)
%   column48: text (%s)
%	column49: text (%s)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
labelNames = [dataArray{1:end-1}];

